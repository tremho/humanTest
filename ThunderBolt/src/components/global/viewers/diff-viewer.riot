
<diff-viewer>
    <div class="scroller">
        <flex-layout orientation="horizontal" justify="space-around">
            <ol class="panel" if="{!state.rightOnly}"/>
            <ul class="divider" if="{ state.both}" />
            <ol class="panel" if="{!state.leftOnly}"/>
        </flex-layout>
        <fill-space height="12px"/>
        <button onclick="{toggle}" if="{state.isDiff}">Highlights Off</button>
        <button onclick="{toggle}" if="{!state.isDiff}">Highlights On</button>
        <fill-space width="40px" />
        <button onclick="{leftonly}">Left side only</button>
        <fill-space width="25px" />
        <button onclick="{rightonly}">Right side only</button>
        <fill-space width="25px" />
        <button onclick="{both}">Both</button>
    </div>
    <style>
        .scroller {
            padding: 5%;
            height: 200px;
            overflow-y: scroll;
        }
        .divider {
            width: 20px;
            padding: 0;
            white-space: nowrap;
            overflow-x: scroll;
        }
        .panel {
            white-space: nowrap;
            width: 45%;
            padding: 4px;
            overflow-x: scroll;
        }
        .ins {
            background-color: lightgreen;
        }
        .del {
            background-color: lightcoral;
            text-decoration: line-through;
        }
    </style>
    <script>
        import {newCommon} from '../../Common';
        import * as simpleTextDiff from 'simple-text-diff'
        const {diffPatch, diffPatchBySeparator} = simpleTextDiff.default;
        let cm;
        function diffDetail(left, right, panel1, panel2, divider) {
          const llines = left.split('\n')
          const rlines = right.split('\n')
          // alignTextLines(llines, rlines)
          let i = 0;
          while(i < llines.length || i < rlines.length) {
            let port = llines[i] || ''
            port.trim();
            let starboard = rlines[i] || ''
            starboard.trim()
            const result = diffPatch(port, starboard,'.')
            const isLineDifferent = (result.before !== result.after)
            let li = document.createElement('li')
            li.innerHTML = insdel(result.before)
            panel1.appendChild(li)
            li = document.createElement('li')
            li.innerHTML = insdel(result.after)
            panel2.appendChild(li)
            li = document.createElement('li')
            li.innerText = isLineDifferent ? '->' : ''
            divider.appendChild(li)

            i++
          }
        }
        function alignTextLines(llines, rlines) {
          for(let i=0; i<llines.length; i++) {
            const left = llines[i]
            const n = rlines.indexOf(left)
            if(n !== -1) {
              let d = n - i;
              let top = rlines.slice(0, i)
              let btm = rlines.slice(n)
              while(d--) {
                top.push('')
              }
              rlines = top.concat(btm)
            }
          }
        }
        function syncScroll(panel1, panel2, divider) {
          const onscroll = e => {
            let st = e.srcElements.scrollTop;
            let sl = e.srcElements.scrollLeft;
            if(panel1) {panel1.scrollTop = st; panel1.scrollLeft = sl;}
            if(panel2) {panel2.scrollTop = st; panel2.scrollLeft = sl;}
            if(divider) {divider.scrollLeft = 0;}
          }
          if(panel1) panel1.onscroll = onscroll;
          if(panel2) panel2.onscroll = onscroll;
          if(divider) divider.onscroll = onscroll;
        }

        function insdel(text) {
          text = text.replace(/<ins>/g,'<span class="ins">').replace(/<\/ins>/,'</span>')
          text = text.replace(/<del>/g,'<span class="del">').replace(/<\/del>/,'</span>')
          return text;
        }
        export default {
          state: {
            isDiff: true,
            leftOnly: false,
            rightOnly: false,
            both: true
          },
          bound: {},
          onBeforeMount(/*props, state*/) {
            cm = newCommon(this)
          },    
          onMounted(props, state) {
            console.log(this.root.tagName, 'onMounted', props, state)
            cm.bindComponent()
          },
          onBeforeUpdate(props, state) {
            // must do when mounted to get the panel references and on before update to handle toggle differences
            const passedCmd = cm.getApp().model.getAtPath('passedCmd');
            const leftSide = (passedCmd && passedCmd.cmdargs && passedCmd.cmdargs[0] && passedCmd.cmdargs[0].text) || ''
            const rightSide = (passedCmd && passedCmd.cmdargs && passedCmd.cmdargs[1] && passedCmd.cmdargs[1].text) || ''
            const panels = this.$$('.panel')
            const leftPanel = state.rightOnly ? null : panels[0]
            const rightPanel = state.leftOnly ? null : panels[1] || panels[0]
            const divider = this.$('.divider')
            if(leftPanel) leftPanel.innerHTML = '';
            if(rightPanel) rightPanel.innerHTML = '';
            if(divider) divider.innerHTML = ''
            if(state.leftOnly) {
              leftPanel.style.width = '100%'
            }
            if(state.rightOnly) {
              rightPanel.style.width = '100%'
            }
            if(state.both) {
              leftPanel.style.width = rightPanel.style.width = ''; // reset to class setting.
            }

            if(state.isDiff) {
              diffDetail(leftSide, rightSide, leftPanel, rightPanel, divider)
            } else {
              if(leftPanel) leftPanel.innerText = leftSide;
              if(rightPanel) rightPanel.innerText = rightSide;
            }
            syncScroll(leftPanel, rightPanel, divider)
          },
          onUpdated(props, state) {              
          },
          onBeforeUnmount(props, state) {              
          },
          onUnmounted(props, state) {              
          },
          toggle(e) {
            const comp = cm.getComponent(e.srcElement);
            comp.state.isDiff = !comp.state.isDiff;
            if(comp.state.isDiff) {
              comp.state.leftOnly = comp.state.rightOnly = false;
              comp.state.both = true;
            }
            comp.update()
          },
          leftonly(e) {
            const comp = cm.getComponent(e.srcElement);
            comp.state.leftOnly = true;
            comp.state.rightOnly = false;
            comp.state.both = false;
            comp.state.isDiff = false;
            comp.update()
          },
          rightonly(e) {
            const comp = cm.getComponent(e.srcElement);
            comp.state.leftOnly = false;
            comp.state.rightOnly = true;
            comp.state.both = false;
            comp.state.isDiff = false;
            comp.update()
          },
          both(e) {
            const comp = cm.getComponent(e.srcElement);
            comp.state.leftOnly = false;
            comp.state.rightOnly = false;
            comp.state.both = true;
            comp.update()
          }
        }   
    </script>
</diff-viewer>    
