{"language":"javascript","client_name":"inchjs","args":[],"client_version":"0.4.1","git_repo_url":"","branch_name":"fatal: not a git repository (or any of the parent directories): .git","objects":[{"comment":"/**\n* Starts manual testing, providing a title.\n*\n* This launches the remote GUI app and supplies the title that will be displayed on the GUI app page.\n* The remote app is then ready to receive commands from the harness.\n*\n* This **must** be called *before* any tests are conducted.\n* When done with *all* tests, call `endManualTest()`\n*\n* @param {string} [title] If not given, a default title will be displayed\n* @return void  This does not return a promise like the other commands\n*\n* @example `startManualTest('Verify Content')`\n*\n*/","meta":{"range":[1146,3656],"filename":"ExchangeFlow.js","lineno":31,"columnno":0,"path":"/build","code":{"id":"astnode100000206","name":"startManualTest","type":"FunctionDeclaration","paramnames":["title"]},"vars":{"appDir":"startManualTest~appDir","devPrefix":"startManualTest~devPrefix","releaseDir":"startManualTest~releaseDir","execPath":"startManualTest~execPath","execFile":"startManualTest~execFile","appPath":"startManualTest~appPath","":null}},"description":"Starts manual testing, providing a title.\n\nThis launches the remote GUI app and supplies the title that will be displayed on the GUI app page.\nThe remote app is then ready to receive commands from the harness.\n\nThis **must** be called *before* any tests are conducted.\nWhen done with *all* tests, call `endManualTest()`","params":[{"type":{"names":["string"]},"optional":true,"description":"If not given, a default title will be displayed","name":"title"}],"returns":[{"description":"void  This does not return a promise like the other commands"}],"examples":["`startManualTest('Verify Content')`"],"name":"startManualTest","longname":"startManualTest","kind":"function","scope":"global"},{"comment":"/**\n* Stops manual testing and closes the remote app.\n* This should be called after the last test command is handled.\n*\n* @example `endManualTest()`\n*/","meta":{"range":[3857,4002],"filename":"ExchangeFlow.js","lineno":98,"columnno":0,"path":"/build","code":{"id":"astnode100000526","name":"endManualTest","type":"FunctionDeclaration","paramnames":[]},"vars":{"skipAll":"endManualTest~skipAll","cmd":"endManualTest~cmd","cmd.cmd":"endManualTest~cmd.cmd"}},"description":"Stops manual testing and closes the remote app.\nThis should be called after the last test command is handled.","examples":["`endManualTest()`"],"name":"endManualTest","longname":"endManualTest","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Verifies that a human is available to conduct the tests.\n* Timeout default for this command is 60 seconds.  If no response is received in that time,\n* this test response will be with 'skipped = true' and 'error = timeout'.\n* Also in that case, all subsequent tests are automatically skipped, with the comment 'unattended'\n* @param {TestOptions} options The 'timeout' option property is honored here (default = 60)\n*\n* @example `verifyHumanAvailable({timeout:60}).then(result => {\n*       if(result.skipped) console.log('no human is available!')\n* })`\n*/","meta":{"range":[4612,4983],"filename":"ExchangeFlow.js","lineno":116,"columnno":0,"path":"/build","code":{"id":"astnode100000556","name":"verifyHumanAvailable","type":"FunctionDeclaration","paramnames":["options"]},"vars":{"cmd":"verifyHumanAvailable~cmd","cmd.cmd":"verifyHumanAvailable~cmd.cmd","cmd.options":"verifyHumanAvailable~cmd.options","cmd.options.prompt":"verifyHumanAvailable~cmd.options.prompt","":null}},"description":"Verifies that a human is available to conduct the tests.\nTimeout default for this command is 60 seconds.  If no response is received in that time,\nthis test response will be with 'skipped = true' and 'error = timeout'.\nAlso in that case, all subsequent tests are automatically skipped, with the comment 'unattended'","params":[{"type":{"names":["TestOptions"]},"description":"The 'timeout' option property is honored here (default = 60)","name":"options"}],"examples":["`verifyHumanAvailable({timeout:60}).then(result => {\n      if(result.skipped) console.log('no human is available!')\n})`"],"name":"verifyHumanAvailable","longname":"verifyHumanAvailable","kind":"function","scope":"global"},{"comment":"/**\n* Displays the contents of a text file and prompts the user for pass/fail/skip or comments\n*\n* @param {string} filename File with text to be displayed\n* @param {TestOptions} options  options for this command (e.g. prompt, timeout)\n*\n*\n* @example `viewFile('path/to/myfile.txt').then(result => {\n*       if(result.passed) console.log('looks okay!')\n* })`\n*/","meta":{"range":[5408,5611],"filename":"ExchangeFlow.js","lineno":141,"columnno":0,"path":"/build","code":{"id":"astnode100000619","name":"viewFile","type":"FunctionDeclaration","paramnames":["filename","options"]},"vars":{"cmd":"viewFile~cmd","cmd.cmd":"viewFile~cmd.cmd","cmd.options":"viewFile~cmd.options","cmd.cmdargs[0].file":"viewFile~cmd.cmdargs[0].file"}},"description":"Displays the contents of a text file and prompts the user for pass/fail/skip or comments","params":[{"type":{"names":["string"]},"description":"File with text to be displayed","name":"filename"},{"type":{"names":["TestOptions"]},"description":"options for this command (e.g. prompt, timeout)","name":"options"}],"examples":["`viewFile('path/to/myfile.txt').then(result => {\n      if(result.passed) console.log('looks okay!')\n})`"],"name":"viewFile","longname":"viewFile","kind":"function","scope":"global"},{"comment":"/**\n* Displays the given text and prompts the user for pass/fail/skip or comments\n*\n* @param {string} text Text to be displayed\n* @param {TestOptions} options  options for this command (e.g. prompt, timeout)\n*\n* @example `showText(\"literal text to be shown in view box\").then(result => {\n*       if(result.passed) console.log('looks okay!')\n*       else if(result.skipped) console.log('test was skipped')\n*       else console.error('test failed!')\n* })`\n*/","meta":{"range":[6109,6304],"filename":"ExchangeFlow.js","lineno":161,"columnno":0,"path":"/build","code":{"id":"astnode100000663","name":"showText","type":"FunctionDeclaration","paramnames":["text","options"]},"vars":{"cmd":"showText~cmd","cmd.cmd":"showText~cmd.cmd","cmd.options":"showText~cmd.options","cmd.cmdargs[0].text":"showText~cmd.cmdargs[0].text"}},"description":"Displays the given text and prompts the user for pass/fail/skip or comments","params":[{"type":{"names":["string"]},"description":"Text to be displayed","name":"text"},{"type":{"names":["TestOptions"]},"description":"options for this command (e.g. prompt, timeout)","name":"options"}],"examples":["`showText(\"literal text to be shown in view box\").then(result => {\n      if(result.passed) console.log('looks okay!')\n      else if(result.skipped) console.log('test was skipped')\n      else console.error('test failed!')\n})`"],"name":"showText","longname":"showText","kind":"function","scope":"global"},{"comment":"/**\n* Displays the contents of a two sets of text or two text files as a side-by-side diff\n* and prompts the user for pass/fail/skip or comments\n*\n* arg is treated as a filename if file exists at the path, otherwise as text.\n*\n* @param {string} arg1 Filename or text (left side)\n* @param {string} arg2 Filename or text (right side)\n* @param {TestOptions} options  options for this command (e.g. prompt, timeout)\n*\n*\n* @example `diff(filenameOrString1, filenameOrString2).then(result => {\n*       if(result.passed) console.log('looks okay!')\n*       else if(result.skipped) console.log('test was skipped')\n*       else console.error('test failed!')\n* })`\n*/","meta":{"range":[7007,7232],"filename":"ExchangeFlow.js","lineno":186,"columnno":0,"path":"/build","code":{"id":"astnode100000707","name":"diff","type":"FunctionDeclaration","paramnames":["arg1","arg2","options"]},"vars":{"cmd":"diff~cmd","cmd.cmd":"diff~cmd.cmd","cmd.options":"diff~cmd.options","cmd.cmdargs[0].file":"diff~cmd.cmdargs[0].file","cmd.cmdargs[1].file":"diff~cmd.cmdargs[1].file"}},"description":"Displays the contents of a two sets of text or two text files as a side-by-side diff\nand prompts the user for pass/fail/skip or comments\n\narg is treated as a filename if file exists at the path, otherwise as text.","params":[{"type":{"names":["string"]},"description":"Filename or text (left side)","name":"arg1"},{"type":{"names":["string"]},"description":"Filename or text (right side)","name":"arg2"},{"type":{"names":["TestOptions"]},"description":"options for this command (e.g. prompt, timeout)","name":"options"}],"examples":["`diff(filenameOrString1, filenameOrString2).then(result => {\n      if(result.passed) console.log('looks okay!')\n      else if(result.skipped) console.log('test was skipped')\n      else console.error('test failed!')\n})`"],"name":"diff","longname":"diff","kind":"function","scope":"global"},{"comment":"/**\n* Displays the image file and prompts the user for pass/fail/skip or comments\n*\n* @param {string} filename Image file to be displayed\n* @param {TestOptions} options  options for this command (e.g. prompt, timeout, width, height)\n*\n* @example `viewImage('./images/prettyBird.png').then(result => {\n*       if(result.passed) console.log('looks okay!')\n*       else if(result.skipped) console.log('test was skipped')\n*       else console.error('test failed!')\n* })`\n*\n* The `width` and `height` options are recognized by this command:\n* @example `viewImage('./images/prettyBird.png', {width:400, height: 400}).then(result => {\n*       ...\n* })`\n*/","meta":{"range":[7919,8124],"filename":"ExchangeFlow.js","lineno":212,"columnno":0,"path":"/build","code":{"id":"astnode100000762","name":"viewImage","type":"FunctionDeclaration","paramnames":["filename","options"]},"vars":{"cmd":"viewImage~cmd","cmd.cmd":"viewImage~cmd.cmd","cmd.options":"viewImage~cmd.options","cmd.cmdargs[0].file":"viewImage~cmd.cmdargs[0].file"}},"description":"Displays the image file and prompts the user for pass/fail/skip or comments","params":[{"type":{"names":["string"]},"description":"Image file to be displayed","name":"filename"},{"type":{"names":["TestOptions"]},"description":"options for this command (e.g. prompt, timeout, width, height)","name":"options"}],"examples":["`viewImage('./images/prettyBird.png').then(result => {\n      if(result.passed) console.log('looks okay!')\n      else if(result.skipped) console.log('test was skipped')\n      else console.error('test failed!')\n})`\n\nThe `width` and `height` options are recognized by this command:","`viewImage('./images/prettyBird.png', {width:400, height: 400}).then(result => {\n      ...\n})`"],"name":"viewImage","longname":"viewImage","kind":"function","scope":"global"},{"comment":"/**\n* Displays two images in a manner that they may be compared\n* and prompts the user for pass/fail/skip or comments\n*\n* @param {string} file1 First Image\n* @param {string} file2 Second Image\n* @param {TestOptions} options  options for this command (e.g. prompt, timeout)\n*\n* @example `compareImages('image1.png', 'image2.jpg').then(result => {\n*       if(result.passed) console.log('looks okay!')\n*       else if(result.skipped) console.log('test was skipped')\n*       else console.error('test failed!')\n* })`\n*\n* For any command, the `specialNotice` property can be used to give the user more information on how to conduct\n* the test.  That is useful for `compareImages`, since it provides two view modes the user can employ for analysis.\n* @example `compareImages('image1.png', 'image2.jpg', {specialNotice:'use the blink compare tool!'}).then(result => {\n*          ...\n* })`\n*/","meta":{"range":[9059,9306],"filename":"ExchangeFlow.js","lineno":240,"columnno":0,"path":"/build","code":{"id":"astnode100000806","name":"compareImages","type":"FunctionDeclaration","paramnames":["file1","file2","options"]},"vars":{"cmd":"compareImages~cmd","cmd.cmd":"compareImages~cmd.cmd","cmd.options":"compareImages~cmd.options","cmd.cmdargs[0].file":"compareImages~cmd.cmdargs[0].file","cmd.cmdargs[1].file":"compareImages~cmd.cmdargs[1].file"}},"description":"Displays two images in a manner that they may be compared\nand prompts the user for pass/fail/skip or comments","params":[{"type":{"names":["string"]},"description":"First Image","name":"file1"},{"type":{"names":["string"]},"description":"Second Image","name":"file2"},{"type":{"names":["TestOptions"]},"description":"options for this command (e.g. prompt, timeout)","name":"options"}],"examples":["`compareImages('image1.png', 'image2.jpg').then(result => {\n      if(result.passed) console.log('looks okay!')\n      else if(result.skipped) console.log('test was skipped')\n      else console.error('test failed!')\n})`\n\nFor any command, the `specialNotice` property can be used to give the user more information on how to conduct\nthe test.  That is useful for `compareImages`, since it provides two view modes the user can employ for analysis.","`compareImages('image1.png', 'image2.jpg', {specialNotice:'use the blink compare tool!'}).then(result => {\n         ...\n})`"],"name":"compareImages","longname":"compareImages","kind":"function","scope":"global"},{"comment":"/**\nInternal function.\nManages the exchange with the remote app\n@private\n*/","meta":{"range":[9424,9998],"filename":"ExchangeFlow.js","lineno":254,"columnno":0,"path":"/build","code":{"id":"astnode100000861","name":"manualTest","type":"FunctionDeclaration","paramnames":["command"]},"vars":{"skipResponse":"manualTest~skipResponse","skipResponse.skipped":"manualTest~skipResponse.skipped","skipResponse.comment":"manualTest~skipResponse.comment","":null}},"description":"Internal function.\nManages the exchange with the remote app","access":"private","name":"manualTest","longname":"manualTest","kind":"function","scope":"global","params":[]},{"comment":"/**\nInternal function.\nResets the promise wait that is made at the top\nof the exchange process.\n@private\n*/","meta":{"range":[10109,10237],"filename":"ExchangeFlow.js","lineno":278,"columnno":0,"path":"/build","code":{"id":"astnode100000929","name":"resetPromptPromise","type":"FunctionDeclaration","paramnames":[]},"vars":{"promptPromise":"resetPromptPromise~promptPromise","":null}},"description":"Internal function.\nResets the promise wait that is made at the top\nof the exchange process.","access":"private","name":"resetPromptPromise","longname":"resetPromptPromise","kind":"function","scope":"global","params":[]},{"comment":"/** @private */","meta":{"range":[10254,10991],"filename":"ExchangeFlow.js","lineno":284,"columnno":0,"path":"/build","code":{"id":"astnode100000944","name":"onPromptOrResponse","type":"FunctionDeclaration","paramnames":["str"]},"vars":{"prefix":"onPromptOrResponse~prefix","trstr":"onPromptOrResponse~trstr","trdata":"onPromptOrResponse~trdata"}},"access":"private","name":"onPromptOrResponse","longname":"onPromptOrResponse","kind":"function","scope":"global","params":[]},{"comment":"/** @private */","meta":{"range":[11008,11127],"filename":"ExchangeFlow.js","lineno":309,"columnno":0,"path":"/build","code":{"id":"astnode100001010","name":"watchForResponse","type":"FunctionDeclaration","paramnames":[]},"vars":{"":null}},"access":"private","name":"watchForResponse","longname":"watchForResponse","kind":"function","scope":"global","params":[]},{"comment":"/** @private */","meta":{"range":[11144,11420],"filename":"ExchangeFlow.js","lineno":315,"columnno":0,"path":"/build","code":{"id":"astnode100001023","name":"writeCommand","type":"FunctionDeclaration","paramnames":["command"]},"vars":{"cmdString":"writeCommand~cmdString"}},"access":"private","name":"writeCommand","longname":"writeCommand","kind":"function","scope":"global","params":[]}]}